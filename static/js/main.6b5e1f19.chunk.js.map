{"version":3,"sources":["table.jsx","form.jsx","about.jsx","jing.jsx","App.js","serviceWorker.js","index.js"],"names":["TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","TableHeader","Table","Form","initialState","handleChange","event","target","value","setState","submitForm","handleSubmit","state","this","htmlFor","type","id","onChange","Component","About","data","fetch","then","result","json","entry","Jing","Home","App","characters","filter","character","i","className","exact","activeClassName","activeStyle","color","to","path","pattern","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6b5e1f19.chunk.js","sourcesContent":["import React from 'react'\n\nconst TableBody = (props) => {\n  const rows = props.characterData.map((row, index) => {\n    return (\n      <tr key={index}>\n        <td>{row.name}</td>\n        <td>{row.job}</td>\n        <td>\n          <button onClick={() => props.removeCharacter(index)}>Delete</button>\n        </td>\n      </tr>\n    )\n  })\n\n  return <tbody>{rows}</tbody>\n}\nconst TableHeader = () => {\n  return (\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Job</th>\n        <th>Remove</th>\n      </tr>\n    </thead>\n  )\n}\nconst Table = (props) => {\n  const { characterData, removeCharacter } = props\n\n  return (\n    <table>\n      <TableHeader />\n      <TableBody\n        characterData={characterData}\n        removeCharacter={removeCharacter}\n      />\n    </table>\n  )\n}\n\nexport default Table\n","import React, { Component } from 'react'\n\nclass Form extends Component {\n  initialState = {\n    name: '',\n    job: '',\n  }\n  handleChange = (event) => {\n    const { name, value } = event.target\n\n    this.setState({\n      [name]: value,\n    })\n  }\n  submitForm = () => {\n    this.props.handleSubmit(this.state)\n    this.setState(this.initialState)\n  }\n  state = this.initialState\n  render() {\n    const { name, job } = this.state\n\n    return (\n      <form>\n        <label htmlFor=\"name\">Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          value={name}\n          onChange={this.handleChange}\n        />\n        <label htmlFor=\"job\">Job</label>\n        <input\n          type=\"text\"\n          name=\"job\"\n          id=\"job\"\n          value={job}\n          onChange={this.handleChange}\n        />\n        <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\n      </form>\n    )\n  }\n}\nexport default Form\n","import React, { Component } from 'react'\n\nclass About extends Component {\n  state = {\n    data: [],\n  }\n  // Code is invoked after the component is mounted/inserted into the DOM tree.\n  componentDidMount() {\n    const url =\n      'https://en.wikipedia.org/w/api.php?action=opensearch&search=Seona+Dancing&format=json&origin=*'\n\n    fetch(url)\n      .then((result) => result.json())\n      .then((result) => {\n        this.setState({\n          data: result,\n        })\n      })\n  }\n  render() {\n    const { data } = this.state\n    const result = data.map((entry, index) => {\n      return <li key={index}>{entry}</li>\n    })\n    return (\n      <div>\n        <h2>About</h2>\n        <ul>{result}</ul>\n      </div>\n    )\n  }\n}\n\nexport default About\n","import React, { Component } from 'react';\nimport './jing.styl'\nclass Jing extends Component {\n  render() {\n    return (\n      <div>\n        jing\n      </div>\n    );\n  }\n}\n\nexport default Jing;","import React, { Component } from 'react'\nimport './App.styl'\nimport { BrowserRouter as Router, Switch, Route, NavLink } from 'react-router-dom'\nimport Table from './table'\nimport Form from './form'\nimport About from './about'\nimport Jing from './jing'\nfunction Home() {\n  return <h2>Home</h2>\n}\nclass App extends Component {\n  state = {\n    characters: [\n      {\n        name: 'Charlie',\n        job: 'Janitor',\n      },\n      {\n        name: 'Mac',\n        job: 'Bouncer',\n      },\n      {\n        name: 'Dee',\n        job: 'Aspring actress',\n      },\n      {\n        name: 'Dennis',\n        job: 'Bartender',\n      },\n    ],\n  }\n  removeCharacter = (index) => {\n    const { characters } = this.state\n\n    this.setState({\n      characters: characters.filter((character, i) => {\n        return i !== index\n      }),\n    })\n  }\n  handleSubmit = (character) => {\n    this.setState({ characters: [...this.state.characters, character] })\n  }\n\n\n  render() {\n    const { characters } = this.state\n    return (\n      <Router>\n        <div className=\"App\">\n          <header>\n            <nav>\n              <ul>\n                <li>\n                  <NavLink exact activeClassName=\"active\" activeStyle={{color: 'pink'}} to=\"/\" className=\"11\">Home</NavLink>\n                </li>\n                <li>\n                  <NavLink activeClassName=\"active\" activeStyle={{color: 'pink'}} to=\"/table\" className=\"11\">Table</NavLink>\n                </li>\n                <li>\n                  <NavLink activeClassName=\"active\" activeStyle={{color: 'pink'}} to=\"/about\" className=\"11\">About</NavLink>\n                </li>\n                <li>\n                  <NavLink activeClassName=\"active\" activeStyle={{color: 'pink'}} to=\"/jing\" className=\"11\">JIng</NavLink>\n                </li>\n              </ul>\n            </nav>\n          </header>\n          <div className=\"container\">\n            <Switch>\n              <Route path=\"/table\">\n                <Table\n                  characterData={characters}\n                  removeCharacter={this.removeCharacter}\n                />\n                <Form handleSubmit={this.handleSubmit} />\n              </Route>\n              <Route path=\"/about\" pattern='/about'>\n                <About />\n              </Route>\n              <Route path=\"/jing\" pattern='/jing'>\n                <Jing />\n              </Route>\n              <Route path=\"/\" pattern='/'>\n                <Home />\n              </Route>\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}