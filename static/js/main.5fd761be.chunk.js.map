{"version":3,"sources":["pages/table/table.jsx","pages/table/form.jsx","pages/about/about.jsx","pages/game/game.jsx","pages/todo/AddTodo.jsx","pages/todo/Todo.jsx","pages/todo/TodoList.jsx","pages/todo/Footer.jsx","pages/todo/todoIndex.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","TableHeader","Table","Form","initialState","handleChange","event","target","value","setState","submitForm","handleSubmit","state","this","htmlFor","type","id","onChange","Component","About","data","fetch","then","result","json","entry","calculateWinner","squares","lines","i","length","a","b","c","Square","className","Board","renderSquare","Game","history","Array","fill","stepNumber","xIsNext","slice","concat","step","status","current","winner","moves","move","desc","jumpTo","handleClick","AddTodo","e","text","addTodo","Todo","completed","style","textDecoration","TodoList","todos","toggleTodo","todo","Footer","filter","setVisiblityFilter","disabled","getVisibleTodos","currentFilter","item","newTodos","nextTodoId","Home","App","characters","character","exact","activeClassName","activeStyle","color","to","path","pattern","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5fd761be.chunk.js","sourcesContent":["import React from 'react'\n\nconst TableBody = (props) => {\n  const rows = props.characterData.map((row, index) => {\n    return (\n      <tr key={index}>\n        <td>{row.name}</td>\n        <td>{row.job}</td>\n        <td>\n          <button onClick={() => props.removeCharacter(index)}>Delete</button>\n        </td>\n      </tr>\n    )\n  })\n\n  return <tbody>{rows}</tbody>\n}\nconst TableHeader = () => {\n  return (\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Job</th>\n        <th>Remove</th>\n      </tr>\n    </thead>\n  )\n}\nconst Table = (props) => {\n  const { characterData, removeCharacter } = props\n\n  return (\n    <table>\n      <TableHeader />\n      <TableBody\n        characterData={characterData}\n        removeCharacter={removeCharacter}\n      />\n    </table>\n  )\n}\n\nexport default Table\n","import React, { Component } from 'react'\n\nclass Form extends Component {\n  initialState = {\n    name: '',\n    job: '',\n  }\n  handleChange = (event) => {\n    const { name, value } = event.target\n\n    this.setState({\n      [name]: value,\n    })\n  }\n  submitForm = () => {\n    this.props.handleSubmit(this.state)\n    this.setState(this.initialState)\n  }\n  state = this.initialState\n  render() {\n    const { name, job } = this.state\n\n    return (\n      <form>\n        <label htmlFor=\"name\">Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          value={name}\n          onChange={this.handleChange}\n        />\n        <label htmlFor=\"job\">Job</label>\n        <input\n          type=\"text\"\n          name=\"job\"\n          id=\"job\"\n          value={job}\n          onChange={this.handleChange}\n        />\n        <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\n      </form>\n    )\n  }\n}\nexport default Form\n","import React, { Component } from 'react'\n\nclass About extends Component {\n  state = {\n    data: [],\n  }\n  // Code is invoked after the component is mounted/inserted into the DOM tree.\n  componentDidMount() {\n    const url =\n      'https://en.wikipedia.org/w/api.php?action=opensearch&search=Seona+Dancing&format=json&origin=*'\n\n    fetch(url)\n      .then((result) => result.json())\n      .then((result) => {\n        this.setState({\n          data: result,\n        })\n      })\n  }\n  render() {\n    const { data } = this.state\n    const result = data.map((entry, index) => {\n      return <li key={index}>{entry}</li>\n    })\n    return (\n      <div>\n        <h2>About</h2>\n        <ul>{result}</ul>\n      </div>\n    )\n  }\n}\n\nexport default About\n","import React, { Component } from 'react'\nimport './game.styl'\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ]\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i]\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a]\n    }\n  }\n  return null\n}\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  )\n}\n\nclass Board extends Component {\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    )\n  }\n}\n\nclass Game extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null),\n        },\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n    }\n  }\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1)\n    const current = history[history.length - 1]\n    const squares = current.squares.slice()\n    if (calculateWinner(squares) || squares[i]) {\n      return\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O'\n    this.setState({\n      history: history.concat([\n        {\n          squares,\n        },\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    })\n  }\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n    })\n  }\n\n  render() {\n    const history = this.state.history\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares)\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Go to game start'\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      )\n    })\n    let status\n    if (winner) {\n      status = 'Winner: ' + winner\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O')\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    )\n  }\n}\nexport default Game\n","import React, { Component } from 'react'\nimport { Input, Button } from 'antd'\nexport default class AddTodo extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      text: '',\n    }\n  }\n  render() {\n    return (\n      <div>\n        <Input value={this.state.text} onChange={this.handleChange}></Input>\n        <Button type=\"primary\" onClick={this.handleClick}>\n          Add\n        </Button>\n      </div>\n    )\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      text: e.target.value,\n    })\n  }\n  handleClick = () => {\n    this.props.addTodo(this.state.text)\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Todo extends Component {\n  render() {\n    const { text, completed, onClick } = this.props\n    return (\n      <li\n        onClick={onClick}\n        style={{\n          textDecoration: completed ? 'line-through' : 'none',\n        }}\n      >\n        {text}\n      </li>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Todo from './Todo'\nexport default class TodoList extends Component {\n  render() {\n    const { todos, toggleTodo } = this.props\n    return (\n      <div>\n        <ul>\n          {todos.map((todo) => {\n            return (\n              <Todo\n                key={todo.id}\n                {...todo}\n                onClick={() => {\n                  toggleTodo(todo.id)\n                }}\n              ></Todo>\n            )\n          })}\n        </ul>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { Button } from 'antd'\nexport default class Footer extends Component {\n  render() {\n    const { filter, setVisiblityFilter } = this.props\n    return (\n      <div>\n        <p>Show:</p>\n        <Button\n          disabled={filter === 'all'}\n          onClick={() => setVisiblityFilter('all')}\n        >\n          All\n        </Button>\n        <Button\n          disabled={filter === 'active'}\n          onClick={() => setVisiblityFilter('active')}\n        >\n          Active\n        </Button>\n        <Button\n          disabled={filter === 'completed'}\n          onClick={() => setVisiblityFilter('completed')}\n        >\n          Completed\n        </Button>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n// import { Button } from 'antd'\nimport AddTodo from './AddTodo'\nimport TodoList from './TodoList'\nimport Footer from './Footer'\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      todos: [\n        {\n          id: 1,\n          text: 'test',\n          completed: false,\n        },\n      ],\n      filter: 'all',\n    }\n    this.nextTodoId = 2\n  }\n  getVisibleTodos = () => {\n    const currentFilter = this.state.filter\n    return this.state.todos.filter((item) => {\n      if (currentFilter === 'active') {\n        return !item.completed\n      } else if (currentFilter === 'completed') {\n        return item.completed\n      } else {\n        return true\n      }\n    })\n  }\n  addTodo = (text) => {\n    const todo = {\n      id: this.nextTodoId++,\n      text,\n      completed: false,\n    }\n    const newTodos = [todo, ...this.state.todos]\n    this.setState({\n      todos: newTodos,\n    })\n  }\n  toggleTodo = (id) => {\n    const newTodos = this.state.todos.map((item) => {\n      return item.id === id ? { ...item, completed: !item.completed } : item\n    })\n    this.setState({\n      todos: newTodos,\n    })\n  }\n  setVisiblityFilter = (filter) => {\n    this.setState({\n      filter,\n    })\n  }\n  render() {\n    const todos = this.getVisibleTodos()\n    // const { todos } = this.state\n    const { filter } = this.props\n    return (\n      <div>\n        <AddTodo addTodo={this.addTodo} />\n        <TodoList todos={todos} toggleTodo={this.toggleTodo} />\n        <Footer filter={filter} setVisiblityFilter={this.setVisiblityFilter} />\n      </div>\n    )\n  }\n}\n\nexport default Todo\n","import React, { Component } from 'react'\nimport './App.styl'\nimport { HashRouter as Router, Switch, Route, NavLink } from 'react-router-dom'\nimport Table from './pages/table/table'\nimport Form from './pages/table/form'\nimport About from './pages/about/about'\nimport Game from './pages/game/game'\nimport Todo from './pages/todo/todoIndex'\nfunction Home() {\n  return <h2>Home</h2>\n}\nclass App extends Component {\n  state = {\n    characters: [\n      {\n        name: 'Charlie',\n        job: 'Janitor',\n      },\n      {\n        name: 'Mac',\n        job: 'Bouncer',\n      },\n      {\n        name: 'Dee',\n        job: 'Aspring actress',\n      },\n      {\n        name: 'Dennis',\n        job: 'Bartender',\n      },\n    ],\n  }\n  removeCharacter = (index) => {\n    const { characters } = this.state\n\n    this.setState({\n      characters: characters.filter((character, i) => {\n        return i !== index\n      }),\n    })\n  }\n  handleSubmit = (character) => {\n    this.setState({ characters: [...this.state.characters, character] })\n  }\n\n  render() {\n    const { characters } = this.state\n    return (\n      <Router>\n        <div className=\"App\">\n          <header>\n            <nav>\n              <ul>\n                <li>\n                  <NavLink\n                    exact\n                    activeClassName=\"active\"\n                    activeStyle={{ color: 'pink' }}\n                    to=\"/\"\n                    className=\"11\"\n                  >\n                    Home\n                  </NavLink>\n                </li>\n                <li>\n                  <NavLink\n                    activeClassName=\"active\"\n                    activeStyle={{ color: 'pink' }}\n                    to=\"/table\"\n                    className=\"11\"\n                  >\n                    Table\n                  </NavLink>\n                </li>\n                <li>\n                  <NavLink\n                    activeClassName=\"active\"\n                    activeStyle={{ color: 'pink' }}\n                    to=\"/about\"\n                    className=\"11\"\n                  >\n                    About\n                  </NavLink>\n                </li>\n                <li>\n                  <NavLink\n                    activeClassName=\"active\"\n                    activeStyle={{ color: 'pink' }}\n                    to=\"/todo\"\n                    className=\"11\"\n                  >\n                    Todo\n                  </NavLink>\n                </li>\n                <li>\n                  <NavLink\n                    activeClassName=\"active\"\n                    activeStyle={{ color: 'pink' }}\n                    to=\"/game\"\n                    className=\"11\"\n                  >\n                    Game\n                  </NavLink>\n                </li>\n              </ul>\n            </nav>\n          </header>\n          <div className=\"container\">\n            <Switch>\n              <Route path=\"/table\">\n                <Table\n                  characterData={characters}\n                  removeCharacter={this.removeCharacter}\n                />\n                <Form handleSubmit={this.handleSubmit} />\n              </Route>\n              <Route path=\"/about\" pattern=\"/about\">\n                <About />\n              </Route>\n              <Route path=\"/todo\" pattern=\"/todo\">\n                <Todo />\n              </Route>\n              <Route path=\"/game\" pattern=\"/game\">\n                <Game />\n              </Route>\n              <Route path=\"/\" pattern=\"/\">\n                <Home />\n              </Route>\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}